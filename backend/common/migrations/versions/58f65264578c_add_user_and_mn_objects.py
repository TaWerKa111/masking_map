"""add user and mn objects

Revision ID: 58f65264578c
Revises: 3f7db76a83eb
Create Date: 2023-03-12 15:07:41.065797

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '58f65264578c'
down_revision = '3f7db76a83eb'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('history_masking',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('filename', sa.String(length=255), nullable=True),
    sa.Column('description', sa.String(length=255), nullable=True),
    sa.Column('masking_uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('data_masking', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.PrimaryKeyConstraint('id', 'masking_uuid')
    )
    op.create_table('mn_object_type',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('protection_status',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=64), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('users',
    sa.Column('updated_at', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(length=64), nullable=True),
    sa.Column('password_hash', sa.String(length=255), nullable=True),
    sa.Column('role', sa.String(length=32), nullable=True),
    sa.Column('name', sa.String(length=255), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_table('type_mnobject_protection',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('id_mn_object', sa.Integer(), nullable=True),
    sa.Column('id_type_work', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['id_mn_object'], ['mn_object.id'], ),
    sa.ForeignKeyConstraint(['id_type_work'], ['type_work.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.add_column('mn_object', sa.Column('id_type', sa.Integer(), nullable=True))
    op.create_foreign_key(None, 'mn_object', 'mn_object_type', ['id_type'], ['id'])
    op.add_column('protection', sa.Column('is_end', sa.Boolean(), nullable=True))
    op.add_column('protection', sa.Column('is_need_masking', sa.Boolean(), nullable=True))
    op.add_column('protection', sa.Column('id_status', sa.Integer(), nullable=True))
    op.create_foreign_key(None, 'protection', 'protection_status', ['id_status'], ['id'])
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint("protection_id_status_fkey", 'protection', type_='foreignkey')
    op.drop_column('protection', 'id_status')
    op.drop_column('protection', 'is_need_masking')
    op.drop_column('protection', 'is_end')
    op.drop_constraint("mn_object_id_type_fkey", 'mn_object', type_='foreignkey')
    op.drop_column('mn_object', 'id_type')
    op.drop_table('type_mnobject_protection')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_table('users')
    op.drop_table('protection_status')
    op.drop_table('mn_object_type')
    op.drop_table('history_masking')
    # ### end Alembic commands ###
